generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String
  email            String    @unique
  passwordHash     String
  role             String    @default("user") // user, admin
  resetToken       String?   // Password reset token
  resetTokenExpiry DateTime? // Password reset token expiry
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  orders           Order[]
  addresses        Address[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  nameEn      String?   // English name
  slug        String    @unique
  slugEn      String?   // English slug
  description String?
  descriptionEn String? // English description
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  brands      Brand[]
  products    Product[]

  @@map("categories")
}

model Brand {
  id          String    @id @default(cuid())
  name        String
  nameEn      String?   // English name
  slug        String    @unique
  slugEn      String?   // English slug
  description String?
  descriptionEn String? // English description
  categoryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products    Product[]

  @@map("brands")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  nameEn      String?  // English name
  slug        String   @unique
  slugEn      String?  // English slug
  categoryId  String
  description String?
  descriptionEn String? // English description
  images      String[]
  stockType   String   @default("piece") // "piece" or "meter" - stok türü
  hasEmbroidery Boolean @default(false) // Nakış özelliği var mı?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  brandId     String?
  sizePrices  Json     // Boyut, fiyat ve stok bilgileri: [{"size": "S", "price": 100, "stock": 50}, {"size": "M", "price": 120, "stock": 30}]
  colors      Json     // Renk seçenekleri: [{"tr": "Kırmızı", "en": "Red"}, {"tr": "Beyaz", "en": "White"}]
  brand       Brand?   @relation(fields: [brandId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("products")
}

model Order {
  id              String      @id @default(cuid())
  userId          String?     // Optional for guest orders
  totalPrice      Decimal     @db.Decimal(10, 2)
  status          String      @default("received") // received, processing, shipped, delivered, cancelled
  paymentStatus   String      @default("pending") // pending, paid, failed, refunded
  paymentMethod   String?     // iyzico, bank_transfer, cash_on_delivery
  iyzicoPaymentId String?
  iyzicoToken     String?     // Iyzico token for callback lookup
  shippingAddress Json
  language        String      @default("tr") // Order language: tr, en
  // Kargo bilgileri
  shippingCompany String?     // ups, yurtici
  trackingNumber  String?     // Kargo takip numarası
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items           OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  productId   String
  productName String
  productPrice Decimal @db.Decimal(10, 2)
  productImage String? // Ürün görseli
  quantity    Decimal  @db.Decimal(10, 2) // Metre için decimal değerler
  stockType   String   @default("piece") // "piece" or "meter" - stok türü
  size        String?
  color       String?
  hasEmbroidery Boolean @default(false)
  embroideryFile String?
  embroideryPrice Decimal @db.Decimal(10, 2) @default(0)
  // Additional product info for order history
  categoryName String?
  brandName   String?
  // Shipping info
  isShipping Boolean @default(false) // Kargo ürünü mü?
  shippingCost Decimal @db.Decimal(10, 2) @default(0) // Kargo ücreti
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  title     String
  fullName  String
  phone     String
  country   String
  city      String
  district  String
  address   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model StoreSettings {
  id                    String   @id @default(cuid())
  turkeyShippingUSD     Decimal  @default(0) @db.Decimal(10, 2) // Türkiye dolar kargo ücreti
  turkeyShippingTRY     Decimal  @default(0) @db.Decimal(10, 2) // Türkiye TL kargo ücreti
  internationalShippingUSD Decimal @default(0) @db.Decimal(10, 2) // Yurtdışı dolar kargo ücreti
  internationalShippingTRY Decimal @default(0) @db.Decimal(10, 2) // Yurtdışı TL kargo ücreti
  embroideryPriceUSD    Decimal  @default(0) @db.Decimal(10, 2) // Dolar nakış ücreti
  embroideryPriceTRY    Decimal  @default(0) @db.Decimal(10, 2) // TL nakış ücreti
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("store_settings")
}
